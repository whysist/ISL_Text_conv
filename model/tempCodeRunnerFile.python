import cv2
import mediapipe as mp
import pandas as pd
import numpy as np
import xgboost as xgb
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import os

mp_hands = mp.solutions.hands
mp_drawing = mp.solutions.drawing_utils

# Function to extract hand landmarks and save to CSV
def extract_hand_landmarks(image, label, landmarks_list):
    # Resize image to 256x256 for faster processing
    image = cv2.resize(image, (256, 256))
    image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    result = mp_hands.Hands(static_image_mode=True, max_num_hands=2, min_detection_confidence=0.5).process(image_rgb)
    
    if result.multi_hand_landmarks:
        for hand_landmarks in result.multi_hand_landmarks:
            landmarks = [lm.x for lm in hand_landmarks.landmark] + \
                        [lm.y for lm in hand_landmarks.landmark] + \
                        [lm.z for lm in hand_landmarks.landmark]
            landmarks_list.append([label] + landmarks)

dataset_path = r"C:\Users\fortn\OneDrive\Desktop\ISL_Text_conv\processed_dataset"
train_path = os.path.join(dataset_path, "train")
test_path = os.path.join(dataset_path, "test")
val_path = os.path.join(dataset_path, "val")

folders = [train_path, test_path, val_path]
data = []
for folder in folders:
    labels = os.listdir(folder)
    for label in labels:
        label_path = os.path.join(folder, label)
        for img_file in os.listdir(label_path):
            img_path = os.path.join(label_path, img_file)
            image = cv2.imread(img_path)
            if image is not None:
                extract_hand_landmarks(image, label, data)

# Save extracted landmarks to CSV
df = pd.DataFrame(data)
df.to_csv("hand_landmarks.csv", index=False)